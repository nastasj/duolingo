plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.11.2'
    id "io.freefair.lombok" version '6.0.0-m2'
}

repositories {
    mavenCentral()
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}


def restAssuredVersion = "5.3.0",
    allureVersion = "2.27.0",
    jUnitVersion = "5.10.2",
    assertJVersion = "3.26.0",
    selenideVersion = "7.2.3",
    ownerVersion = "1.0.4",
    slf4jVersion = "2.0.13",
    javaFakerVersion = "1.0.2",
    gsonVersion = "2.11.0",
    commonsVersion = "2.11.0"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    testImplementation(
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "com.codeborne:selenide:$selenideVersion",
            "org.junit.jupiter:junit-jupiter:$jUnitVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.slf4j:slf4j-api:$slf4jVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "org.assertj:assertj-core:$assertJVersion",
            "com.github.javafaker:javafaker:$javaFakerVersion",
            "com.google.code.gson:gson:$gsonVersion",
            "commons-io:commons-io:$commonsVersion"
    )
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task duolingo(type: Test) {
    useJUnitPlatform {
        includeTags("duolingo")
    }
}

task api(type: Test) {
    useJUnitPlatform {
        includeTags("api")
    }
}

task ui(type: Test) {
    useJUnitPlatform {
        includeTags("ui")
    }
}

task smoke(type: Test) {
    useJUnitPlatform {
        includeTags("smoke")
    }
}

task regress(type: Test) {
    useJUnitPlatform {
        includeTags("regress")
    }
}

task profile(type: Test) {
    useJUnitPlatform {
        includeTags("profile")
    }
}

task settings(type: Test) {
    useJUnitPlatform {
        includeTags("settings")
    }
}

task positive(type: Test) {
    useJUnitPlatform {
        includeTags("positive")
    }
}

task negative(type: Test) {
    useJUnitPlatform {
        includeTags("negative")
    }
}

